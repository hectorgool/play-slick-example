


    case class Message(senderId: Id[UserTable],
                       content: String,
                       ts: DateTime,
                       roomId: Option[Id[RoomTable]] = None,
                       toId: Option[Id[UserTable]]   = None,
                       id: Id[MessageTable]          = Id(0L) )
                       

   implicit val GetUserId    =
     GetResult(r => Id[UserTable](r.nextLong))

   implicit val GetMessageId =
     GetResult(r => Id[MessageTable](r.nextLong))

   implicit val GetOptionalUserId =
     GetResult(r => r.nextLongOption.map(id => Id[UserTable](id)))

   implicit val GetOptionalRoomId =
     GetResult(r => r.nextLongOption.map(id => Id[RoomTable](id)))

   implicit val GetMessage = GetResult(r =>
      Message(senderId  = r.<<,
              content   = r.<<,
              ts        = r.<<,
              id        = r.<<,
              roomId    = r.<<?,
              toId      = r.<<?) )

   val results = exec {
     sql""" select * from "message" """.as[Message]
   }

   results.foreach(result => println(result))

  override def list(page: Int = 0, pageSize: Int = 10, orderBy: Int = 1, filter: String = "%"): Future[Page[Employee]] = {
    try {
      val offset = pageSize * page
      val query =
        (for {
          employee <- employees if employee.name.toLowerCase like filter.toLowerCase
        } yield (employee)).drop(offset).take(pageSize)
      val totalRows = count(filter)
      val result = db.run(query.result)
      result flatMap (employees => totalRows map (rows => Page(employees, page, offset, rows)))
    } finally { db.close() }
  }

  https://github.com/gupta-himanshu/play-reactive-slick/blob/master/app/models/DAO.scala
  